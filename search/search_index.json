{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Llama documentation!</p> <p>Llama stands for Lua Library for Immutable Data, and it has a ton of utilities for working with Lua tables without mutating them. It's a very simple library, so there isn't much else to say about it!</p>"},{"location":"#why-immutability-is-important","title":"Why immutability is important","text":"<p>At first glance, immutability may seem like extra work in return for nothing, but immutability can seriously shrink your code complexity! In any application with state, mutations to the state are not immediately apparent, which can will cause bugs later on during development.</p> <p>Immutability is very good for tracking change to the state by making use of reference equality. If the current state is not the same object as the previous state, then you know that the state has changed, and can react accordingly! With this, immutability has an added bonus of being able to keep a \"history\" of state changes, which lets you do all sorts of cool things such as backtracking state (useful in hunting for bugs). In comparison, tracking mutable state changes is a nightmare!</p>"},{"location":"api-reference/","title":"API Reference","text":""},{"location":"api-reference/#constants","title":"Constants","text":""},{"location":"api-reference/#none","title":"<code>None</code>","text":"<p>As Lua dictionaries cannot distinguish between a value not being present and a value of <code>nil</code>, <code>Llama.None</code> exists to represent values that should be interpreted as <code>nil</code>. This is especially useful when removing values with <code>Dictionary.merge</code>.</p>"},{"location":"api-reference/#dictionary","title":"Dictionary","text":"<p>Dictionaries are tables with key-value pairs.</p>"},{"location":"api-reference/#constructors","title":"Constructors","text":""},{"location":"api-reference/#fromlists","title":"<code>fromLists</code>","text":"<pre><code>Llama.Dictionary.fromLists(keys, values) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary constructed from <code>keys</code> and <code>values</code>. The lists are expected to be the same size.</p> <p>Example:</p> <pre><code>local keys = { \"foo\", \"bar\", \"baz\" }\nlocal values = { 1, 2, 3 }\n\nLlama.Dictionary.fromLists(keys, values)\n</code></pre> <p>Results:</p> <pre><code>{\n    foo = 1,\n    bar = 2,\n    baz = 3,\n}\n</code></pre>"},{"location":"api-reference/#copying","title":"Copying","text":""},{"location":"api-reference/#copy","title":"<code>copy</code>","text":"<pre><code>Llama.Dictionary.copy(dictionary) -&gt; dictionary\n</code></pre> <p>Returns a shallow copy of <code>dictionary</code>.</p>"},{"location":"api-reference/#copydeep","title":"<code>copyDeep</code>","text":"<pre><code>Llama.Dictionary.copyDeep(dictionary) -&gt; dictionary\n</code></pre> <p>Returns a deep copy of <code>dictionary</code>.</p> <p>Warning</p> <p>Deep copying is more expensive than shallow copying and forces you to resort to the more expensive <code>equalsDeep</code> for value equality checking. Only use it when absolutely necessary.</p>"},{"location":"api-reference/#comparing","title":"Comparing","text":""},{"location":"api-reference/#equals","title":"<code>equals</code>","text":"<pre><code>Llama.Dictionary.equals(...dictionaries) -&gt; result\n</code></pre> <p>Returns whether all <code>dictionaries</code> have shallow value equality.</p>"},{"location":"api-reference/#equalsdeep","title":"<code>equalsDeep</code>","text":"<pre><code>Llama.Dictionary.equalsDeep(...dictionaries) -&gt; result\n</code></pre> <p>Returns whether all <code>dictionaries</code> have deep value equality.</p> <p>Warning</p> <p>Deep comparison is more expensive than shallow comparison. Only use it when absolutely necessary.</p>"},{"location":"api-reference/#persistent-changes","title":"Persistent changes","text":""},{"location":"api-reference/#merge","title":"<code>merge</code>","text":"<pre><code>Llama.Dictionary.merge(...dictionaries) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary with all of the entries of <code>dictionaries</code> merged together. Later entries replace older ones, and <code>Llama.None</code> can be used to remove values.</p> Aliases <code>join</code> <p>Example: <pre><code>local a = {\n    key = \"value\",\n    foo = \"bar\",\n    removeMe = 0,\n}\n\nlocal b = {\n    removeMe = Llama.None,\n    addMe = 1,\n}\n\nLlama.Dictionary.merge(a, b)\n</code></pre> Results: <pre><code>{\n    key = \"value\",\n    foo = \"bar\",\n    addMe = 1,\n}\n</code></pre></p>"},{"location":"api-reference/#mergedeep","title":"<code>mergeDeep</code>","text":"<p><pre><code>Llama.Dictionary.mergeDeep(...dictionaries) -&gt; dictionary\n</code></pre> Returns a new dictionary with all of the entries of <code>dictionaries</code> deeply merged together. Later entries replace older ones, and <code>Llama.None</code> can be used to remove values.</p> Aliases <code>joinDeep</code> <p>Example: <pre><code>local a = {\n    key = \"value\",\n    foo = \"bar\",\n    dictionary = {\n        foo = \"foo\",\n        bar = \"bar\",\n    },\n    removeMe = 0,\n}\n\nlocal b = {\n    removeMe = Llama.None,\n    addMe = 1,\n    dictionary = {\n        baz = \"baz\",\n    },\n}\n\nLlama.Dictionary.mergeDeep(a, b)\n</code></pre> Results: <pre><code>{\n    key = \"value\",\n    foo = \"bar\",\n    addMe = 1,\n    dictionary = {\n        foo = \"foo\",\n        bar = \"bar\",\n        baz = \"baz\",\n    },\n}\n</code></pre></p> <p>Warning</p> <p>Deep merging is more expensive than shallow merging and forces you to resort to the more expensive <code>equalsDeep</code> for value equality checking. Only use it when absolutely necessary.</p>"},{"location":"api-reference/#removekey","title":"<code>removeKey</code>","text":"<pre><code>Llama.Dictionary.removeKey(dictionary, key) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary with the entry at <code>key</code> is removed from <code>dictionary</code>.</p>"},{"location":"api-reference/#removekeys","title":"<code>removeKeys</code>","text":"<pre><code>Llama.Dictionary.removeKeys(dictionary, ...keys) -&gt; dictionary\n</code></pre> <p>Returns new dictionary with entries at <code>keys</code> are removed from <code>dictionary</code>.</p>"},{"location":"api-reference/#removevalue","title":"<code>removeValue</code>","text":"<pre><code>Llama.Dictionary.removeValue(dictionary, value) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary where any entry with <code>value</code> are removed from <code>dictionary</code>.</p>"},{"location":"api-reference/#removevalues","title":"<code>removeValues</code>","text":"<pre><code>Llama.Dictionary.removeValues(dictionary, ...values) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary where any entry with any <code>values</code> are removed from <code>dictionary</code>.</p>"},{"location":"api-reference/#set","title":"<code>set</code>","text":"<pre><code>Llama.Dictionary.set(dictionary, key, value) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary with the entry at <code>key</code> in <code>dictionary</code> is set to <code>value</code>.</p>"},{"location":"api-reference/#update","title":"<code>update</code>","text":"<pre><code>Llama.Dictionary.update(dictionary, key[, updater[, callback]]) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary with the entry at <code>key</code> is updated by <code>updater</code>. If the entry does not exist, <code>callback</code> is invoked and the entry is created from its return value.</p> <p><code>updater</code> and <code>callback</code> are expected to have the following signatures:</p> <pre><code>updater(value, key) -&gt; value\ncallback(key) -&gt; value\n</code></pre> <p>Example:</p> <pre><code>local dictionary = {\n    foo = \"foo\",\n    bar = \"bar\",\n}\n\nlocal function fooify(value)\n    return \"foo\" .. value\nend\n\nLlama.Dictionary.update(dictionary, \"bar\", fooify)\nLlama.Dictionary.update(dictionary, \"baz\", fooify, function()\n    return \"baz\"\nend)\n</code></pre> <p>Results:</p> <pre><code>{\n    foo = \"foo\",\n    bar = \"foobar\",\n}\n\n{\n    foo = \"foo\",\n    bar = \"bar\",\n    baz = \"baz\",\n}\n</code></pre>"},{"location":"api-reference/#sequence-algorithms","title":"Sequence algorithms","text":""},{"location":"api-reference/#filter","title":"<code>filter</code>","text":"<pre><code>Llama.Dictionary.filter(dictionary, filterer) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary with only the entries of <code>dictionary</code> for which <code>filterer</code> returns a truthy.</p> <p><code>filterer</code> is expected to have the following signature:</p> <pre><code>filterer(value, key) -&gt; result\n</code></pre> <p>Example:</p> <pre><code>local dictionary = {\n    foo1 = \"foo\",\n    foo2 = \"foo\",\n    bar1 = \"bar\",\n}\n\nlocal function onlyFoo(value)\n    return value == \"foo\"\nend\n\nLlama.Dictionary.filter(dictionary, onlyFoo)\n</code></pre> <p>Results:</p> <pre><code>{\n    foo1 = \"foo\",\n    foo2 = \"foo\",\n}\n</code></pre>"},{"location":"api-reference/#flip","title":"<code>flip</code>","text":"<pre><code>Llama.Dictionary.flip(dictionary) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary with the keys and values of <code>dictionary</code> swapped.</p> <p>Example:</p> <pre><code>local dictionary = {\n    foo = \"oof\",\n    bar = \"rab\",\n    baz = \"zab\",\n}\n\nLlama.Dictionary.flip(dictionary)\n</code></pre> <p>Results:</p> <pre><code>{\n    oof = \"foo\",\n    rab = \"bar\",\n    zab = \"baz\",\n}\n</code></pre>"},{"location":"api-reference/#map","title":"<code>map</code>","text":"<pre><code>Llama.Dictionary.map(dictionary, mapper) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary with the values (and keys) of <code>dictionary</code> mapped over using <code>mapper</code>.</p> <p><code>mapper</code> is expected to have the following signature:</p> <pre><code>mapper(value, key) -&gt; value[, key]\n</code></pre> <p>Example:</p> <pre><code>local dictionary = {\n    foo = \"foo\",\n    bar = \"bar\",\n    baz = \"baz\",\n}\n\nlocal function fooify(value)\n    return \"foo\" .. value\nend\n\nLlama.Dictionary.map(dictionary, fooify)\n</code></pre> <p>Results:</p> <pre><code>{\n    foo = \"foofoo\",\n    bar = \"foobar\",\n    baz = \"foobaz\",\n}\n</code></pre>"},{"location":"api-reference/#reading-values","title":"Reading values","text":""},{"location":"api-reference/#has","title":"<code>has</code>","text":"<pre><code>Llama.Dictionary.has(dictionary, key) -&gt; result\n</code></pre> <p>Returns whether <code>dictionary</code> has a value at the <code>key</code>.</p>"},{"location":"api-reference/#includes","title":"<code>includes</code>","text":"<pre><code>Llama.Dictionary.includes(dictionary, value) -&gt; result\n</code></pre> <p>Returns whether <code>dictionary</code> includes a <code>value</code>.</p>"},{"location":"api-reference/#conversion","title":"Conversion","text":""},{"location":"api-reference/#keys","title":"<code>keys</code>","text":"<pre><code>Llama.Dictionary.keys(dictionary) -&gt; list\n</code></pre> <p>Returns a list of <code>dictionary</code>'s keys.</p>"},{"location":"api-reference/#values","title":"<code>values</code>","text":"<pre><code>Llama.Dictionary.values(dictionary) -&gt; list\n</code></pre> <p>Returns a list of <code>dictionary</code>'s values.</p>"},{"location":"api-reference/#reducing","title":"Reducing","text":""},{"location":"api-reference/#count","title":"<code>count</code>","text":"<pre><code>Llama.Dictionary.count(dictionary[, predicate]) -&gt; result\n</code></pre> <p>Returns the number of entries in <code>dictionary</code> for which <code>predicate</code> returns a truthy. If <code>predicate</code> is not provided, <code>count</code> simply counts all of the entries in <code>dictionary</code> (useful since <code>#dictionary</code> does not give the number of dictionary entries, only the number of list entries).</p> <p><code>predicate</code> is expected to have the following signature:</p> <pre><code>predicate(value, key) -&gt; result\n</code></pre> <p>Example:</p> <pre><code>local dictionary = {\n    foo1 = \"foo\",\n    foo2 = \"foo\",\n    bar1 = \"bar\",\n    bar2 = \"bar\",\n}\n\nlocal function onlyFoo(value)\n    return value == \"foo\"\nend\n\nLlama.Dictionary.count(dictionary, onlyFoo)\n</code></pre> <p>Results:</p> <pre><code>2\n</code></pre>"},{"location":"api-reference/#every","title":"<code>every</code>","text":"<pre><code>Llama.Dictionary.every(dictionary, predicate) -&gt; result\n</code></pre> <p>Returns whether <code>predicate</code> returns a truthy for all of <code>dictionary</code>'s entries.</p> <p><code>predicate</code> is expected to have the following signature:</p> <pre><code>predicate(value, key) -&gt; result\n</code></pre> <p>Example:</p> <pre><code>local a = {\n    foo1 = \"foo\",\n    foo2 = \"foo\",\n}\n\nlocal b = {\n    foo = \"foo\",\n    bar = \"bar\",\n    baz = \"baz\",\n}\n\nlocal function onlyFoo(value)\n    return value == \"foo\"\nend\n\nLlama.Dictionary.every(a, onlyFoo)\nLlama.Dictionary.every(b, onlyFoo)\n</code></pre> <p>Results:</p> <pre><code>true\nfalse\n</code></pre>"},{"location":"api-reference/#some","title":"<code>some</code>","text":"<pre><code>Llama.Dictionary.some(dictionary, predicate) -&gt; result\n</code></pre> <p>Returns whether <code>predicate</code> returns a truthy for any of <code>dictionary</code>'s entries.</p> <p><code>predicate</code> is expected to have the following signature:</p> <pre><code>predicate(value, key) -&gt; result\n</code></pre> <p>Example:</p> <pre><code>local a = {\n    bar1 = \"bar\",\n    bar2 = \"bar\",\n}\n\nlocal b = {\n    foo = \"foo\",\n    bar = \"bar\",\n    baz = \"baz\",\n}\n\nlocal function onlyFoo(value)\n    return value == \"foo\"\nend\n\nLlama.Dictionary.some(a, onlyFoo)\nLlama.Dictionary.every(b, onlyFoo)\n</code></pre> <p>Results:</p> <pre><code>false\ntrue\n</code></pre>"},{"location":"api-reference/#combination","title":"Combination","text":""},{"location":"api-reference/#flatten","title":"<code>flatten</code>","text":"<pre><code>Llama.Dictionary.flatten(dictionary[, depth]) -&gt; dictionary\n</code></pre> <p>Returns a new dictionary with <code>dictionary</code>'s entries flattened to <code>depth</code> or as deeply as possible if <code>depth</code> is not provided.</p> <p>Example:</p> <pre><code>local dictionary = {\n    foo = \"foo\",\n    foobar = {\n        bar = \"bar\",\n        barbaz = {\n            baz = \"baz\",\n        }\n    }\n}\n\nLlama.Dictionary.flatten(dictionary)\n</code></pre> <p>Results:</p> <pre><code>{\n    foo = \"foo\",\n    bar = \"bar\",\n    baz = \"baz\",\n}\n</code></pre>"},{"location":"api-reference/#list","title":"List","text":"<p>Lists are tables with index-value pairs.</p>"},{"location":"api-reference/#constructors_1","title":"Constructors","text":""},{"location":"api-reference/#create","title":"<code>create</code>","text":"<pre><code>Llama.List.create(count, value) -&gt; list\n</code></pre> <p>Creates a new list of <code>count</code> <code>value</code>s.</p>"},{"location":"api-reference/#copying_1","title":"Copying","text":""},{"location":"api-reference/#copy_1","title":"<code>copy</code>","text":"<pre><code>Llama.List.copy(list) -&gt; list\n</code></pre> <p>Returns a shallow copy of <code>list</code>.</p>"},{"location":"api-reference/#copydeep_1","title":"<code>copyDeep</code>","text":"<pre><code>Llama.List.copyDeep(list) -&gt; list\n</code></pre> <p>Returns a deep copy of <code>list</code>.</p> <p>Warning</p> <p>Deep copying is more expensive than shallow copying and forces you to resort to the more expensive <code>equalsDeep</code> for value equality checking. Only use it when absolutely necessary.</p>"},{"location":"api-reference/#comparing_1","title":"Comparing","text":""},{"location":"api-reference/#equals_1","title":"<code>equals</code>","text":"<pre><code>Llama.List.equals(...lists) -&gt; result\n</code></pre> <p>Returns whether all <code>lists</code> have shallow value equality.</p>"},{"location":"api-reference/#equalsdeep_1","title":"<code>equalsDeep</code>","text":"<pre><code>Llama.List.equalsDeep(...lists) -&gt; result\n</code></pre> <p>Returns whether all <code>lists</code> have deep value equality.</p> <p>Warning</p> <p>Deep comparison is more expensive than shallow comparison. Only use it when absolutely necessary.</p>"},{"location":"api-reference/#persistent-changes_1","title":"Persistent changes","text":""},{"location":"api-reference/#concat","title":"<code>concat</code>","text":"<pre><code>Llama.List.concat(...lists) -&gt; list\n</code></pre> <p>Returns a concatenation of all of the lists in <code>lists</code>.</p> Aliases <code>join</code> <p>Example:</p> <pre><code>local a = { 1, 2, 3 }\nlocal b = { 4, 5, 6 }\n\nLlama.List.concat(a, b)\n</code></pre> <p>Results:</p> <pre><code>{ 1, 2, 3, 4, 5, 6 }\n</code></pre>"},{"location":"api-reference/#concatdeep","title":"<code>concatDeep</code>","text":"<pre><code>Llama.List.concatDeep(...lists) -&gt; list\n</code></pre> <p>Returns a concatenation of all of the lists in <code>lists</code> with their sublists deep copied.</p> Aliases <code>joinDeep</code> <p>Warning</p> <p>Deep concatenating is more expensive than shallow concatenating and forces you to resort to the more expensive <code>equalsDeep</code> for value equality checking. Only use it when absolutely necessary.</p>"},{"location":"api-reference/#insert","title":"<code>insert</code>","text":"<pre><code>Llama.List.insert(list, index, ...values) -&gt; list\n</code></pre> <p>Returns a new list with <code>values</code> inserted at <code>index</code> of <code>list</code>. If <code>index</code> is 0 or negative, <code>insert</code> inserts at <code>index</code> relative to the end of <code>list</code>.</p>"},{"location":"api-reference/#push","title":"<code>push</code>","text":"<pre><code>Llama.List.push(list, ...values) -&gt; list\n</code></pre> <p>Returns copy of <code>list</code> with <code>values</code> appended to the end of <code>list</code>.</p> Aliases <code>append</code>"},{"location":"api-reference/#pop","title":"<code>pop</code>","text":"<pre><code>Llama.List.pop(list[, numPops]) -&gt; list\n</code></pre> <p>Returns copy of <code>list</code> with <code>numPops</code> values popped off the end of <code>list</code>.</p>"},{"location":"api-reference/#removeindex","title":"<code>removeIndex</code>","text":"<pre><code>Llama.List.removeIndex(list, index) -&gt; list\n</code></pre> <p>Returns a new list where the entry in <code>list</code> at <code>index</code> is removed. If <code>index</code> is 0 or negative, <code>removeIndex</code> removes at <code>index</code> relative to the end of <code>list</code>. </p>"},{"location":"api-reference/#removeindices","title":"<code>removeIndices</code>","text":"<pre><code>Llama.List.removeIndices(list, ...indices) -&gt; list\n</code></pre> <p>Returns a new list where all entries in <code>list</code> at <code>indices</code> is removed. If an index is 0 or negative, <code>removeIndex</code> removes at the index relative to the end of <code>list</code>.</p>"},{"location":"api-reference/#removevalue_1","title":"<code>removeValue</code>","text":"<pre><code>Llama.List.removeValue(list, value) -&gt; list\n</code></pre> <p>Returns a new list with all entries of <code>list</code> with <code>value</code> removed.</p>"},{"location":"api-reference/#removevalues_1","title":"<code>removeValues</code>","text":"<pre><code>Llama.List.removeValues(list, ...values) -&gt; list\n</code></pre> <p>Returns a new list with all entries of <code>list</code> with any <code>values</code> removed.</p>"},{"location":"api-reference/#set_1","title":"<code>set</code>","text":"<pre><code>Llama.List.set(list, index, value) -&gt; list\n</code></pre> <p>Returns a new list with <code>index</code> in <code>list</code> set to the <code>value</code>. If <code>index</code> is 0 or negative, <code>set</code> sets at <code>index</code> relative to the end of <code>list</code>.</p>"},{"location":"api-reference/#shift","title":"<code>shift</code>","text":"<pre><code>Llama.List.shift(list[, numPlaces]) -&gt; list\n</code></pre> <p>Returns new list with <code>numPlaces</code> values shifted off the beginning of <code>list</code>.</p> <p>Example:</p> <pre><code>local list = { \"foo\", \"bar\", \"baz\" }\n\nLlama.List.shift(list)\n</code></pre> <p>Results:</p> <pre><code>{ \"bar\", \"baz\" }\n</code></pre>"},{"location":"api-reference/#unshift","title":"<code>unshift</code>","text":"<pre><code>Llama.List.unshift(list, ...values) -&gt; list\n</code></pre> <p>Returns new list with <code>values</code> prepended to the beginning of <code>list</code>.</p> <p>Example:</p> <pre><code>local list = { \"baz\" }\n\nLlama.List.unshift(list, \"foo\", \"bar\")\n</code></pre> <p>Results:</p> <pre><code>{ \"foo\", \"bar\", \"baz\" }\n</code></pre>"},{"location":"api-reference/#update_1","title":"<code>update</code>","text":"<pre><code>Llama.List.update(list, index[, updater[, callback]]) -&gt; list\n</code></pre> <p>Returns a new list with the entry at <code>index</code> being updated by <code>updater</code>. If the entry does not exist, <code>callback</code> is invoked and the entry is created from its return value.</p> <p><code>updater</code> and <code>callback</code> are expected to have the following signatures:</p> <pre><code>updater(value, index) -&gt; value\ncallback(index) -&gt; value\n</code></pre> <p>Example:</p> <pre><code>local list = { \"foo\", \"bar\" }\n\nlocal function fooify(value)\n    return \"foo\" .. value\nend\n\nLlama.List.update(list, 2, fooify)\nLlama.List.update(list, 3, fooify, function()\n    return \"baz\"\nend)\n</code></pre> <p>Results:</p> <pre><code>{ \"foo\", \"foobar\" }\n\n{ \"foo\", \"bar\", \"baz\" }\n</code></pre>"},{"location":"api-reference/#sequence-algorithms_1","title":"Sequence algorithms","text":""},{"location":"api-reference/#filter_1","title":"<code>filter</code>","text":"<pre><code>Llama.List.filter(list, filterer) -&gt; list\n</code></pre> <p>Returns a new list with only the entries of <code>list</code> for which <code>filterer</code> returns a truthy.</p> <p><code>filterer</code> is expected to have the following signature:</p> <pre><code>filterer(value, index) -&gt; result\n</code></pre> <p>Example:</p> <pre><code>local list = { \"foo\", \"foo\", \"bar\" }\n\nlocal function onlyFoo(value)\n    return value == \"foo\"\nend\n\nLlama.List.filter(list, onlyFoo)\n</code></pre> <p>Results:</p> <pre><code>{ \"foo\", \"foo\" }\n</code></pre>"},{"location":"api-reference/#map_1","title":"<code>map</code>","text":"<pre><code>Llama.List.map(list, mapper) -&gt; list\n</code></pre> <p>Returns a new list with the values of <code>list</code> mapped over using <code>mapper</code>.</p> <p><code>mapper</code> is expected to have the following signature:</p> <pre><code>mapper(value, index) -&gt; value\n</code></pre> <p>Example:</p> <pre><code>local list = { \"foo\", \"bar\", \"baz\" }\n\nlocal function fooify(value)\n    return \"foo\" .. value\nend\n\nLlama.List.map(list, fooify)\n</code></pre> <p>Results:</p> <pre><code>{ \"foofoo\", \"foobar\", \"foobaz\" }\n</code></pre>"},{"location":"api-reference/#reverse","title":"<code>reverse</code>","text":"<pre><code>Llama.List.reverse(list) -&gt; list\n</code></pre> <p>Returns a new list with the entries of <code>list</code> reversed.</p> <p>Example:</p> <pre><code>local list = { 1, 2, 3 }\n\nLlama.List.reverse(list)\n</code></pre> <p>Results:</p> <pre><code>{ 3, 2, 1 }\n</code></pre>"},{"location":"api-reference/#sort","title":"<code>sort</code>","text":"<pre><code>Llama.list.sort(list[, comparator]) -&gt; list\n</code></pre> <p>Returns a new list with the entries of <code>list</code> sorted by <code>comparator</code> if given. <code>comparator</code> should return <code>true</code> if the first argument should come before the second, and <code>false</code> otherwise.</p> <p><code>comparator</code> is expected to have the following signature:</p> <pre><code>comparator(a, b) -&gt; result\n</code></pre>"},{"location":"api-reference/#zip","title":"<code>zip</code>","text":"<pre><code>Llama.list.zip(...lists) -&gt; list\n</code></pre> <p>Returns a new list of <code>lists</code> \"zipped\" together. The length of <code>list</code> is the length of the shortest provided list.</p> <p>Example:</p> <pre><code>local a = { \"foo\", \"bar\", \"baz\" }\nlocal b = { 1, 2, 3, 4 }\n\nLlama.List.zip(a, b)\n</code></pre> <p>Results:</p> <pre><code>{\n    { \"foo\", 1 },\n    { \"bar\", 2 },\n    { \"baz\", 3 },\n}\n</code></pre>"},{"location":"api-reference/#zipall","title":"<code>zipAll</code>","text":"<pre><code>Llama.list.zipAll(...lists) -&gt; list\n</code></pre> <p>Returns a new list of <code>lists</code> \"zipped\" together. <code>zipAll</code> zips as much as possible, filling in <code>nil</code> values with <code>Llama.None</code></p> <p>Example:</p> <pre><code>local a = { \"foo\", \"bar\", \"baz\" }\nlocal b = { 1, 2, 3, 4 }\n\nLlama.List.zipAll(a, b)\n</code></pre> <p>Results:</p> <pre><code>{\n    { \"foo\", 1 },\n    { \"bar\", 2 },\n    { \"baz\", 3 },\n    { Llama.None, 4 },\n}\n</code></pre>"},{"location":"api-reference/#creating-subsets","title":"Creating subsets","text":""},{"location":"api-reference/#slice","title":"<code>slice</code>","text":"<pre><code>Llama.List.slice(list[, from[, to]]) -&gt; list\n</code></pre> <p>Returns a new list sliced from <code>list</code>. If <code>from</code> is not provided, <code>slice</code> slices from the beginning of <code>list</code>. If <code>to</code> is not provided, <code>slice</code> slices to the end of <code>list</code>.</p> <p>Example:</p> <pre><code>local list = { 1, 2, 3, 4, 5 }\n\nLlama.List.slice(list, 1, 3)\n</code></pre> <pre><code>{ 1, 2, 3 }\n</code></pre>"},{"location":"api-reference/#reading-values_1","title":"Reading values","text":""},{"location":"api-reference/#first","title":"<code>first</code>","text":"<pre><code>Llama.List.first(list) -&gt; result\n</code></pre> <p>Returns the first value in <code>list</code>.</p>"},{"location":"api-reference/#last","title":"<code>last</code>","text":"<pre><code>Llama.List.last(list) -&gt; result\n</code></pre> <p>Returns the last value in <code>list</code>.</p>"},{"location":"api-reference/#includes_1","title":"<code>includes</code>","text":"<pre><code>Llama.List.includes(list, value) -&gt; result\n</code></pre> <p>Returns whether <code>list</code> includes a <code>value</code>.</p>"},{"location":"api-reference/#finding-a-value","title":"Finding a value","text":""},{"location":"api-reference/#find","title":"<code>find</code>","text":"<pre><code>Llama.List.find(list, value[, from]) -&gt; index\n</code></pre> <p>Returns the first index from <code>from</code> if provided for which <code>list</code> has <code>value</code>. If <code>from</code> is 0 or negative, <code>find</code> searches from <code>from</code> relative to the end of <code>list</code>.</p>"},{"location":"api-reference/#findlast","title":"<code>findLast</code>","text":"<pre><code>Llama.List.findLast(list, value[, from]) -&gt; index\n</code></pre> <p>Returns the last index from <code>from</code> if provided for which <code>list</code> has <code>value</code>. If <code>from</code> is 0 or negative, <code>findLast</code> searches from <code>from</code> relative to the end of <code>list</code>.</p>"},{"location":"api-reference/#findwhere","title":"<code>findWhere</code>","text":"<pre><code>Llama.List.findWhere(list, predicate[, from]) -&gt; index\n</code></pre> <p>Returns the first index from <code>from</code> if provided for which <code>list</code>'s value satisfies <code>predicate</code>. If <code>from</code> is 0 or negative, <code>findWhere</code> searches from <code>from</code> relative to the end of <code>list</code>.</p> <p><code>predicate</code> is expected to have the following signature:</p> <pre><code>predicate(value, index) -&gt; result\n</code></pre>"},{"location":"api-reference/#findwherelast","title":"<code>findWhereLast</code>","text":"<pre><code>Llama.List.findWhereLast(list, predicate[, from]) -&gt; index\n</code></pre> <p>Returns the last index from <code>from</code> if provided for which <code>list</code>'s value satisfies <code>predicate</code>. If <code>from</code> is 0 or negative, <code>findWhereLast</code> searches from <code>from</code> relative to the end of <code>list</code>.</p> <p><code>predicate</code> is expected to have the following signature:</p> <pre><code>predicate(value, index) -&gt; result\n</code></pre>"},{"location":"api-reference/#conversion_1","title":"Conversion","text":""},{"location":"api-reference/#toset","title":"<code>toSet</code>","text":"<pre><code>Llama.List.toSet(list) -&gt; list\n</code></pre> <p>Returns a new set created from <code>list</code>.</p>"},{"location":"api-reference/#reducing_1","title":"Reducing","text":""},{"location":"api-reference/#count_1","title":"<code>count</code>","text":"<pre><code>Llama.List.count(list[, predicate]) -&gt; result\n</code></pre> <p>Returns the number of entries in <code>list</code> for which <code>predicate</code> returns a truthy. If no predicate is provided, <code>count</code> simply counts all of the entries in <code>list</code>.</p> <p><code>predicate</code> is expected to have the following signature:</p> <pre><code>predicate(value, index) -&gt; result\n</code></pre> <p>Example:</p> <pre><code>local list = { \"foo\", \"foo\", \"bar\" }\n\nlocal function onlyFoo(value)\n    return value == \"foo\"\nend\n\nLlama.List.count(list, onlyFoo)\n</code></pre> <p>Results:</p> <pre><code>2\n</code></pre>"},{"location":"api-reference/#every_1","title":"<code>every</code>","text":"<pre><code>Llama.List.every(list, predicate) -&gt; result\n</code></pre> <p>Returns whether <code>predicate</code> returns a truthy for all of <code>list</code>'s entries.</p> <p><code>predicate</code> is expected to have the following signature:</p> <pre><code>predicate(value, index) -&gt; result\n</code></pre> <p>Example:</p> <pre><code>local a = { \"foo\", \"foo\" }\nlocal b = { \"foo\", \"foo\", \"bar\" }\n\nlocal function onlyFoo(value)\n    return value == \"foo\"\nend\n\nLlama.List.every(a, onlyFoo)\nLlama.List.every(b, onlyFoo)\n</code></pre> <p>Results:</p> <pre><code>true\nfalse\n</code></pre>"},{"location":"api-reference/#some_1","title":"<code>some</code>","text":"<pre><code>Llama.List.some(list, predicate) -&gt; result\n</code></pre> <p>Returns whether <code>predicate</code> returns a truthy for any of <code>list</code>'s entries.</p> <p><code>predicate</code> is expected to have the following signature:</p> <pre><code>predicate(value, key) -&gt; result\n</code></pre> <p>Example:</p> <pre><code>local a = { \"bar\", \"bar\" }\nlocal b = { \"foo\", \"bar\", \"baz\" }\n\nlocal function onlyFoo(value)\n    return value == \"foo\"\nend\n\nLlama.List.some(a, onlyFoo)\nLlama.List.some(b, onlyFoo)\n</code></pre> <p>Results:</p> <pre><code>false\ntrue\n</code></pre>"},{"location":"api-reference/#reduce","title":"<code>reduce</code>","text":"<pre><code>Llama.List.reduce(list, reducer[, initialReduction]) -&gt; value\n</code></pre> <p>Reduces <code>list</code> to a single value, from left to right. If <code>initialReduction</code> is not provided, <code>reduce</code> uses the first value in <code>list</code>.</p> <p><code>reducer</code> is expected to have the following signature:</p> <pre><code>reducer(reduction, value, key) -&gt; reduction\n</code></pre> <p>Example:</p> <pre><code>local list = { 1, 2, 3 }\n\nlocal function add(reduction, value)\n    return reduction = reduction + value\nend\n\nLlama.List.reduce(list, add)\n</code></pre> <p>Results:</p> <pre><code>6\n</code></pre>"},{"location":"api-reference/#reduceright","title":"<code>reduceRight</code>","text":"<pre><code>Llama.List.reduceRight(list, reducer[, initialReduction]) -&gt; value\n</code></pre> <p>Reduces <code>list</code> to a single value, from right to left. If <code>initialReduction</code> is not provided, <code>reduceRight</code> uses the last value in <code>list</code>.</p> <p><code>reducer</code> is expected to have the following signature:</p> <pre><code>reducer(reduction, value, key) -&gt; reduction\n</code></pre> <p>Example:</p> <pre><code>local list = { 1, 2, 3 }\n\nlocal function subtract(reduction, value)\n    return reduction = reduction - value\nend\n\nLlama.List.reduceRight(list, subtract)\n</code></pre> <p>Results:</p> <pre><code>0\n</code></pre>"},{"location":"api-reference/#combination_1","title":"Combination","text":""},{"location":"api-reference/#flatten_1","title":"<code>flatten</code>","text":"<pre><code>Llama.List.flatten(list[, depth]) -&gt; list\n</code></pre> <p>Returns a new list with all of <code>list</code>'s entries flattened to <code>depth</code> or as deeply as possible if <code>depth</code> is not provided.</p> <p>Example:</p> <pre><code>local list = {\n    \"foo\",\n    {\n        \"bar\",\n        {\n            \"baz\",\n        }\n    }\n}\n\nLlama.List.flatten(list)\n</code></pre> <p>Results:</p> <pre><code>{ \"foo\", \"bar\", \"baz\" }\n</code></pre>"},{"location":"api-reference/#splice","title":"<code>splice</code>","text":"<pre><code>Llama.List.splice(list, from, to, ...values) -&gt; list\n</code></pre> <p>Returns a new list with <code>values</code> replacing the values between <code>from</code> and <code>to</code> in <code>list</code>.</p> <p>Example:</p> <pre><code>local list = { \"foo\", 2, 3}\n\nLlama.List.splice(list, 2, 3, \"bar\", \"baz\")\n</code></pre> <p>Results:</p> <pre><code>{ \"foo\", \"bar\", \"baz\" }\n</code></pre>"},{"location":"api-reference/#set_2","title":"Set","text":"<p>Sets are tables where each value may only occur once.</p>"},{"location":"api-reference/#constructors_2","title":"Constructors","text":""},{"location":"api-reference/#fromlist","title":"<code>fromList</code>","text":"<pre><code>Llama.Set.fromList(list) -&gt; set\n</code></pre> <p>Creates a set from <code>list</code>.</p> <p>Example:</p> <pre><code>local list = { \"foo\", \"bar\", \"baz\" }\n\nLlama.Set.fromList(list)\n</code></pre> <p>Results:</p> <pre><code>{\n    foo = true,\n    bar = true,\n    baz = true,\n}\n</code></pre>"},{"location":"api-reference/#copying_2","title":"Copying","text":""},{"location":"api-reference/#copy_2","title":"<code>copy</code>","text":"<pre><code>Llama.Set.copy(set) -&gt; set\n</code></pre> <p>Returns a shallow copy of <code>set</code>.</p>"},{"location":"api-reference/#comparing_2","title":"Comparing","text":""},{"location":"api-reference/#issubset","title":"<code>isSubset</code>","text":"<pre><code>Llama.Set.isSubset(subset, superset) -&gt; result\n</code></pre> <p>Returns whether <code>subset</code> is a subset of <code>superset</code>.</p> <p>Example:</p> <pre><code>local a = {\n    foo = true,\n    bar = true,\n}\n\nlocal b = {\n    foo = true,\n    bar = true,\n    baz = true,\n}\n\nLlama.Set.isSubset(a, b)\nLlama.Set.isSubset(b, a)\n</code></pre> <p>Results:</p> <pre><code>true\nfalse\n</code></pre>"},{"location":"api-reference/#issuperset","title":"<code>isSuperset</code>","text":"<pre><code>Llama.Set.isSuperset(superset, subset) -&gt; result\n</code></pre> <p>Returns whether <code>superset</code> is a superset of <code>subset</code>.</p> <p>Example:</p> <pre><code>local a = {\n    foo = true,\n    bar = true,\n    baz = true,\n}\n\nlocal b = {\n    foo = true,\n    bar = true,\n}\n\nLlama.Set.isSuperset(a, b)\nLlama.Set.isSuperset(b, a)\n</code></pre> <p>Results:</p> <pre><code>true\nfalse\n</code></pre>"},{"location":"api-reference/#persistent-changes_2","title":"Persistent changes","text":""},{"location":"api-reference/#add","title":"<code>add</code>","text":"<pre><code>Llama.Set.add(set, ...values) -&gt; set\n</code></pre> <p>Returns a new set with <code>values</code> added to <code>set</code>.</p> <p>Example:</p> <pre><code>local set = {\n    foo = true,\n    bar = true,\n}\n\nLlama.Set.add(set, \"baz\")\n</code></pre> <p>Results:</p> <pre><code>{\n    foo = true,\n    bar = true,\n    baz = true,\n}\n</code></pre>"},{"location":"api-reference/#subtract","title":"<code>subtract</code>","text":"<pre><code>Llama.Set.subtract(set, ...values) -&gt; set\n</code></pre> <p>Returns a new set with <code>values</code> subtracted from <code>set</code>.</p> <p>Example:</p> <pre><code>local set = {\n    foo = true,\n    bar = true,\n    baz = true,\n}\n\nLlama.Set.subtract(set, \"baz\")\n</code></pre> <p>Results:</p> <pre><code>{\n    foo = true,\n    bar = true,\n}\n</code></pre>"},{"location":"api-reference/#union","title":"<code>union</code>","text":"<pre><code>Llama.Set.union(...sets) -&gt; set\n</code></pre> <p>Returns a new set with all of the values of <code>sets</code> combined.</p> <p>Example:</p> <pre><code>local a = {\n    foo = true,\n    bar = true,\n}\n\nlocal b = {\n    bar = true,\n    baz = true,\n}\n\nLlama.Set.union(a, b)\n</code></pre> <p>Results:</p> <pre><code>{\n    foo = true,\n    bar = true,\n    baz = true,\n}\n</code></pre>"},{"location":"api-reference/#intersection","title":"<code>intersection</code>","text":"<pre><code>Llama.Set.intersection(...sets) -&gt; set\n</code></pre> <p>Returns a new set with only the values of <code>sets</code> that intersect.</p> <p>Example:</p> <pre><code>local a = {\n    foo = true,\n    bar = true,\n}\n\nlocal b = {\n    bar = true,\n    baz = true,\n}\n\nLlama.Set.intersection(a, b)\n</code></pre> <p>Results:</p> <pre><code>{\n    bar = true,\n}\n</code></pre>"},{"location":"api-reference/#sequence-algorithms_2","title":"Sequence algorithms","text":""},{"location":"api-reference/#filter_2","title":"<code>filter</code>","text":"<pre><code>Llama.Set.filter(set, filterer) -&gt; set\n</code></pre> <p>Returns a new set with only the entries of the set for which the filterer returns a truthy.</p> <p><code>filterer</code> is expected to have the following signature:</p> <pre><code>filterer(value) -&gt; result\n</code></pre> <p>Example:</p> <pre><code>local set = {\n    [1] = true,\n    [2] = true,\n    [3] = true,\n    [4] = true,\n    [5] = true,\n}\n\nlocal function onlyEvens(value)\n    return value % 2 == 0\nend\n\nLlama.Set.filter(set, onlyEvens)\n</code></pre> <p>Results:</p> <pre><code>{\n    [2] = true,\n    [4] = true,\n}\n</code></pre>"},{"location":"api-reference/#map_2","title":"<code>map</code>","text":"<pre><code>Llama.Set.map(set, mapper) -&gt; set\n</code></pre> <p>Returns a new set with the values (and keys) of <code>dictionary</code> mapped using the mapper.</p> <p><code>mapper</code> is expected to have the following signature:</p> <pre><code>mapper(value) -&gt; value\n</code></pre> <p>Example:</p> <pre><code>local set = {\n    foo = true,\n    bar = true,\n    baz = true,\n}\n\nlocal function fooify(value)\n    return \"foo\" .. value\nend\n\nLlama.Set.map(set, fooify)\n</code></pre> <p>Results:</p> <pre><code>{\n    foofoo = true,\n    foobar = true,\n    foobaz = true,\n}\n</code></pre>"},{"location":"api-reference/#reading-values_2","title":"Reading values","text":""},{"location":"api-reference/#has_1","title":"<code>has</code>","text":"<pre><code>Llama.Set.has(set, value) -&gt; result\n</code></pre> <p>Returns whether <code>set</code> has <code>value</code>.</p>"},{"location":"api-reference/#equalobjects","title":"<code>equalObjects</code>","text":"<pre><code>Llama.equalObjects(...objects) -&gt; result\n</code></pre> <p>Returns whether the items have reference equality.</p>"},{"location":"api-reference/#isempty","title":"<code>isEmpty</code>","text":"<pre><code>Llama.isEmpty(table) -&gt; result\n</code></pre> <p>Returns whether the table is empty.</p>"},{"location":"guide/installation/","title":"Installation","text":"<p>There are a few ways to get started with Llama.</p>"},{"location":"guide/installation/#method-1-import-model-file","title":"Method 1: Import model file","text":"<ol> <li>Download the <code>.rbxmx</code> model file from the latest release on the Llama releases page.</li> <li>Insert the model anywhere in a Roblox place!</li> </ol>"},{"location":"guide/installation/#method-2-good-ol-copy-paste","title":"Method 2: Good ol' copy + paste","text":"<ol> <li>Copy the <code>src</code> directory of Llama into your project.</li> <li>Rename it to <code>Llama</code>.</li> <li>Make sure you put <code>t</code> under the Llama directory. (this step will hopefully be resolved in the future by package managers or Luau type-checking)</li> <li>Use something like Rojo to sync your project to Roblox Studio!</li> </ol>"},{"location":"guide/installation/#method-3-git-submodule","title":"Method 3: Git submodule","text":"<ol> <li>Navigate to where you want to keep your submodules in Git bash.</li> <li>Run <code>git submodule add https://github.com/F-RDY/llama.git</code>.</li> <li>Using something like Rojo, set up your project to sync <code>Llama/src</code> into Roblox Studio!</li> </ol>"},{"location":"guide/installation/#method-4-package-manager","title":"Method 4: Package manager","text":"<p>Coming Soon\u2122</p>"},{"location":"guide/usage/","title":"Usage","text":""},{"location":"guide/usage/#basic-usage","title":"Basic usage","text":"<p>To use Llama, simply require it as a module from where you installed it! It is also recommended that you set <code>Llama.Dictionary</code>, <code>Llama.List</code>, and <code>Llama.Set</code> to their own variables; otherwise, you'll be typing a lot!</p> <pre><code>-- Other modules...\nlocal Llama = require(LlamaPath)\n\nlocal Dictionary = Llama.Dictionary\nlocal List = Llama.List\nlocal Set = Llama.Set\n</code></pre>"},{"location":"guide/usage/#usage-with-roact-and-rodux","title":"Usage with Roact and Rodux","text":"<p>Rodux requires your state to be immutable, so Llama is a great choice for manipulating it!</p> <pre><code>local function reducer(state, action)\n    if action.type == \"Add\" then\n        return Dictionary.merge(state, {\n            counter = counter + 1\n        })\n    elseif action.type == \"Subtract\" then\n        return Dictionary.merge(state, {\n            counter = counter - 1\n        })\n    end\nend\n</code></pre>"}]}